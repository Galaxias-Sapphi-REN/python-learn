#!/usr/bin/python
# -*- coding: UTF-8 -*-
"""
Created on 2017-1-21

@author: sapphire

函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。
函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，比如print()。
但你也可以自己创建函数，这被叫做用户自定义函数。
"""


# 定义一个函数
def def_a_function():
    """
---------------------------------------------------------------------------------------------------
    例：定义一个函数
---------------------------------------------------------------------------------------------------
    函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()。
    任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。
    函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。
    函数内容以冒号起始，并且缩进。
    return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。
---------------------------------------------------------------------------------------------------

    :return:
    """
    print("Function(def_a_function) has been called!")


# 参数传递
def pass_by_reference_or_value(param_s):
    """
---------------------------------------------------------------------------------------------------
    例：参数传递
---------------------------------------------------------------------------------------------------
    所有参数（自变量）在Python里都是按引用传递。
---------------------------------------------------------------------------------------------------

    :param param_s:
    :return:
    """
    # 所有参数（自变量）在Python里都是按引用传递。
    if isinstance(param_s, str):
        param_s += " change!"
    else:
        param_s.append(5)
    print("inner function value is : " + str(param_s))
    return


# 调用函数时可使用的正式参数类型
def desc_a_persion(name, age=25, *attrs):
    """
---------------------------------------------------------------------------------------------------
    例：调用函数时可使用的正式参数类型
---------------------------------------------------------------------------------------------------
    加了星号（*）的变量名会存放所有未命名的变量参数。选择不多传参数也可。
---------------------------------------------------------------------------------------------------
    :param name:    关键字参数，必备参数
    :param age:     关键字参数，默认参数
    :param attr:    不定长参数
    :return:
    """
    print(name)
    print(age)
    for attr in attrs:
        print(attr)


# lambda 来创建匿名函数。
def lambda_function():
    """
---------------------------------------------------------------------------------------------------
    例：lambda 来创建匿名函数。
---------------------------------------------------------------------------------------------------
    lambda只是一个表达式，函数体比def简单很多。
    lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。
    lambda函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。
    虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。
---------------------------------------------------------------------------------------------------
    :return:
    """
    # 可写函数说明
    _add = lambda arg1, arg2: arg1 + arg2

    # 调用sum函数
    print(_add(10, 20))
    print(_add(20, 20))

print('''
===================================================================================================
=                                               Open                                              =
===================================================================================================
''')

print(__doc__)

print('''
===================================================================================================
=                                          Def a Function                                         =
===================================================================================================
''')
# 定义一个函数
print(def_a_function.__doc__)
def_a_function()
print('''
===================================================================================================
=                                        Reference or Value                                       =
===================================================================================================
''')
# 参数传递
print(pass_by_reference_or_value.__doc__)
s = 'param'
pass_by_reference_or_value(s)
print("outer function value is : " + s)
l = [1, 2, 3]
pass_by_reference_or_value(l)
print("outer function value is : " + str(l))
print('''
===================================================================================================
=                                            Parameters                                           =
===================================================================================================
''')
# 调用函数时可使用的正式参数类型
print(desc_a_persion.__doc__)
print("必备参数，默认参数")
desc_a_persion('rensifei')
print("关键字参数")
desc_a_persion(age=24, name='rensifei')
print("不定长参数")
desc_a_persion('rensifei', 24, 172)
print('''
===================================================================================================
=                                          Lambda Function                                        =
===================================================================================================
''')
# 匿名函数
print(lambda_function.__doc__)
lambda_function()
print('''
===================================================================================================
=                                              Closed                                             =
===================================================================================================
''')