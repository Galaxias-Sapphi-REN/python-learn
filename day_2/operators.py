#!/usr/bin/env python
# encoding: utf-8
"""
Created on 2017-1-19

@author: sapphire

本章节主要说明Python的运算符。举个简单的例子 4 + 5 = 9 。 例子中，4 和 5 被称为操作数，"+" 称为运算符。
Python语言支持以下类型的运算符:
算术运算符
比较（关系）运算符
赋值运算符
逻辑运算符
位运算符
成员运算符
身份运算符
运算符优先级
"""


# 算术运算符
def arithmetic_operator(a, b):
    """
===============================================================================================
例：算术运算符
===============================================================================================
运算符	描述	                                                实例
+	    加           - 两个对象相加	                        a + b 输出结果 30
-	    减           - 得到负数或是一个数减去另一个数	            a - b 输出结果 -10
*	    乘           - 两个数相乘或是返回一个被重复若干次的字符串	a * b 输出结果 200
/	    除           - x除以y                              	b / a 输出结果 2
%	    模           - 返回除法的余数	                        b % a 输出结果 0
**	    幂           - 返回x的y次幂	                        a**b 为10的20次方， 输出结果 100000000000000000000
//	    整除         - 返回商的整数部分	                        9//2 输出结果 4 , 9.0//2.0 输出结果 4.0
===============================================================================================
    """
    # +
    print(str(a) + ' + ' + str(b) + ' = ' + str(a + b))
    # -
    print(str(a) + ' - ' + str(b) + ' = ' + str(a - b))
    # *
    print(str(a) + ' * ' + str(b) + ' = ' + str(a * b))
    # /
    print(str(a) + ' / ' + str(b) + ' = ' + str(a / b))
    # %
    print(str(a) + ' % ' + str(b) + ' = ' + str(a % b))
    # **
    print(str(a) + ' ** ' + str(b) + ' = ' + str(a ** b))
    # //
    print(str(a) + ' // ' + str(b) + ' = ' + str(a // b))


# 比较运算符
def comparison_operator(a, b):
    """
===============================================================================================
例：比较运算符
===============================================================================================
运算符	描述  	实例
==	    等于丶     -       比较对象是否相等	        (a == b)    返回 False。
!=	    不等于     -       比较两个对象是否不相等	    (a != b)    返回 true.
<>	    不等于     -       比较两个对象是否不相等	    (a <> b)    返回 true。这个运算符类似 != 。
>	    大于丶     -       返回x是否大于y	        (a > b)     返回 False。
<	    小于丶     -       返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。
                                                (a < b)     返回 true。
>=	    大\等于    -       返回x是否大于等于y。	    (a >= b)    返回 False。
<=	    小\等于    -	        返回x是否小于等于y。	(a <= b)    返回 true。
===============================================================================================
   """
    # ==
    if a == b:
        print(str(a) + ' == ' + str(b))
    # !=
    if a != b:
        print(str(a) + ' != ' + str(b))
    # >
    if a > b:
        print(str(a) + ' > ' + str(b))
    # <
    if a < b:
        print(str(a) + ' < ' + str(b))
    # >=
    if a >= b:
        print(str(a) + ' >= ' + str(b))
    # <=
    if a <= b:
        print(str(a) + ' <= ' + str(b))


# 赋值运算符
def assignment_operator(a, b):
    """
===============================================================================================
例：赋值运算符
===============================================================================================
运算符	描述	            实例
=	    简单的赋值运算符	c = a + b 将 a + b 的运算结果赋值为 c
+=	    加法赋值运算符	    c += a 等效于 c = c + a
-=	    减法赋值运算符	    c -= a 等效于 c = c - a
*=	    乘法赋值运算符	    c *= a 等效于 c = c * a
/=	    除法赋值运算符	    c /= a 等效于 c = c / a
%=	    取模赋值运算符	    c %= a 等效于 c = c % a
**=	    幂赋值运算符	    c **= a 等效于 c = c ** a
//=	    取整除赋值运算符	c //= a 等效于 c = c // a
===============================================================================================
   """
    # =
    print(str(a) + ' + ' + str(b) + ' = ' + str(a + b))
    # +=
    c = a
    c += b
    print(str(a) + ' += ' + str(b) + ' = ' + str(c))
    # -=
    c = a
    c -= b
    print(str(a) + ' -= ' + str(b) + ' = ' + str(c))
    # *=
    c = a
    c *= b
    print(str(a) + ' *= ' + str(b) + ' = ' + str(c))
    # /=
    c = a
    c /= b
    print(str(a) + ' /= ' + str(b) + ' = ' + str(c))
    # %=
    c = a
    c %= b
    print(str(a) + ' %= ' + str(b) + ' = ' + str(c))
    # **=
    c = a
    c **= b
    print(str(a) + ' **= ' + str(b) + ' = ' + str(c))
    # //=
    c = a
    c //= b
    print(str(a) + ' //= ' + str(b) + ' = ' + str(c))


# 位运算符
def bitwise_operator(a, b):
    """
===============================================================================================
例：位运算符
===============================================================================================
运算符	描述	                        实例
&	    按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0
                                    (a & b) 输出结果 12 ，二进制解释： 0000 1100
|	    按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。
                                    (a | b) 输出结果 61 ，二进制解释： 0011 1101
^	    按位异或运算符：当两对应的二进位相异时，结果为1
                                    (a ^ b) 输出结果 49 ，二进制解释： 0011 0001
~	    按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1
                                    (~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。
<<	    左移动运算符：运算数的各二进位全部左移若干位，由"<<"右边的数指定移动的位数，高位丢弃，低位补0。
                                    a << 2 输出结果 240 ，二进制解释： 1111 0000
>>	    右移动运算符：把">>"左边的运算数的各二进位全部右移若干位，">>"右边的数指定移动的位数
                                    a >> 2 输出结果 15 ，二进制解释： 0000 1111
===============================================================================================
      """
    # bin
    print((str(a) + ' : ').ljust(30, ' ') + bin(a).lstrip('0b').ljust(8, '0'))
    # bin
    print((str(b) + ' : ').ljust(30, ' ') + bin(b).lstrip('0b').ljust(8, '0'))
    # &
    print((str(a) + ' & ' + str(b) + ' = ' + str(a & b) + " : ").ljust(30, ' ') + bin(a & b).lstrip('0b').ljust(8, '0'))
    # |
    print((str(a) + ' | ' + str(b) + ' = ' + str(a | b) + " : ").ljust(30, ' ') + bin(a | b).lstrip('0b').ljust(8, '0'))
    # ^
    print((str(a) + ' ^ ' + str(b) + ' = ' + str(a ^ b) + " : ").ljust(30, ' ') + bin(a ^ b).lstrip('0b').ljust(8, '0'))
    # ~
    print(('~' + str(a) + ' = ' + str(~a) + " : ").ljust(30, ' ') + bin(~a))
    # << 2
    print((str(a) + ' << 2 = ' + str(a << 2) + " : ").ljust(30, ' ') + bin(a << 2).lstrip('0b').ljust(8, '0'))
    # >> 2
    print((str(a) + ' >> 2 = ' + str(a >> 2) + " : ").ljust(30, ' ') + bin(a >> 2).lstrip('0b').ljust(8, '0'))


# 逻辑运算符
def logical_operator(a, b):
    """
===============================================================================================
例：逻辑运算符
===============================================================================================
Python语言支持逻辑运算符

运算符	逻辑表达式	描述	实例
and	    x and y	    布尔"与" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。	(a and b) 返回 20。
or	    x or y	    布尔"或"	- 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。	(a or b) 返回 10。
not	not x	        布尔"非" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。	not(a and b) 返回 False
===============================================================================================
    """
    if a and b:
        print(str(a) + ', ' + str(b) + ' 都为 true')
    else:
        print(str(a) + ', ' + str(b) + ' 有一个不为 true')

    if a or b:
        print(str(a) + ', ' + str(b) + ' 至少有一个为 true')
    else:
        print(str(a) + ', ' + str(b) + ' 都为 false')

    if not (a and b):
        print(str(a) + ', ' + str(b) + ' 至少有一个为 false')
    else:
        print(str(a) + ', ' + str(b) + ' 都为 true')


# 成员运算符
def member_operator(a, b):
    """
===============================================================================================
例：成员运算符
===============================================================================================
除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。

    运算符	描述	                                                实例
    in	    如果在指定的序列中找到值返回 True，否则返回 False。	        x 在 y 序列中 , 如果 x 在 y 序列中返回 True。
    not in	如果在指定的序列中没有找到值返回 True，否则返回 False。	    x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。
===============================================================================================
    """

    my_list = [1, 2, 3, 4, 5]
    if a in my_list:
        print(str(a) + '在给定的列表中： ' + str(my_list))
    else:
        print(str(a) + '不在给定的列表中： ' + str(my_list))

    if b not in my_list:
        print(str(b) + '不在给定的列表中： ' + str(my_list))
    else:
        print(str(b) + '在给定的列表中： ' + str(my_list))


# 身份运算符
def identity_operator(a, b):
    """
===============================================================================================
例：身份运算符
===============================================================================================
身份运算符用于比较两个对象的存储单元

    运算符	描述	                                实例
    is	    is是判断两个标识符是不是引用自一个对象	    x is y, 如果 id(x) 等于 id(y) , is 返回结果 1
    is not	is not是判断两个标识符是不是引用自不同对象	x is not y, 如果 id(x) 不等于 id(y). is not 返回结果 1
===============================================================================================
    """
    if a is b:
        print(str(a) + " 和 " + str(b) + " 有相同的标识")
    else:
        print(str(a) + " 和 " + str(b) + " 没有相同的标识")

    if id(a) is not id(b):
        print('id(' + str(a) + ") 和 " + str(b) + " 没有相同的标识")
    else:
        print('id(' + str(a) + ") 和 " + str(b) + " 有相同的标识")

    if a is 1:
        print(str(a) + " 和 1 有相同的标识")
    else:
        print(str(a) + " 和 1 没有相同的标识")

    if id(a) is not id(1):
        print('id(' + str(a) + ") 和 1 没有相同的标识")
    else:
        print('id(' + str(a) + ") 和 1 有相同的标识")


# 运算符优先级
def operator_priority():
    """
===============================================================================================
例：运算符优先级
===============================================================================================
运算符	                    描述
**	                        指数 (最高优先级)
~ + -	                    按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)
* / % //	                乘，除，取模和取整除
+ -	                        加法减法
>> <<	                    右移，左移运算符
&	                        位 'AND'
^ |	                        位运算符
<= < > >=	                比较运算符
<> == !=	                等于运算符
= %= /= //= -= += *= **=	赋值运算符
is is not	                身份运算符
in not in	                成员运算符
not or and	                逻辑运算符
===============================================================================================
    """

    a = 20
    b = 10
    c = 15
    d = 5
    print('a=20, b=10, c=15, d=5')
    e = (a + b) * c / d  # ( 30 * 15 ) / 5
    print("(a + b) * c / d 运算结果为：" + str(e))
    e = ((a + b) * c) / d  # (30 * 15 ) / 5
    print("((a + b) * c) / d 运算结果为：" + str(e))
    e = (a + b) * (c / d);  # (30) * (15/5)
    print("(a + b) * (c / d) 运算结果为：" + str(e))
    e = a + (b * c) / d;  # 20 + (150/5)
    print("a + (b * c) / d 运算结果为：" + str(e))


print(__doc__)
# 算术运算符
print(arithmetic_operator.__doc__)
arithmetic_operator(100, 3)
# 比较运算符
print(comparison_operator.__doc__)
comparison_operator(1, 2)
# 赋值运算符
print(assignment_operator.__doc__)
assignment_operator(2, 3)
# 位运算符
print(bitwise_operator.__doc__)
bitwise_operator(60, 13)
# 逻辑运算符
print(logical_operator.__doc__)
logical_operator(3, -2)
# 成员运算符
print(member_operator.__doc__)
member_operator(5, 20)
# 身份运算符
print(identity_operator.__doc__)
identity_operator(20, 20)
# 运算符优先级
print(operator_priority.__doc__)
operator_priority()
